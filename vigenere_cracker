#!/usr/bin/env python3

from optparse import OptionParser
import sys
import os

class VigenereCracker:
    AllowedCharacters = [' ', '\n', '\t', ',', '.', ':', ';', '(', ')', '[', ']',
                         '{', '}', '_', '-', '/', '*', '=', '<', '>', '#', '?', '+',
                         '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '\'', '"']

    # 6587760 letters tested
    English_percentage = [  7.495840771369934,
                            1.3592935990382162,
                            2.2568369218065016,
                            4.057585582959914,
                            12.081967163345356,
                            2.030280398800199,
                            1.836618213171093,
                            6.2680486235078385,
                            6.194548678154638,
                            0.0981517238029315,
                            0.6597234871944333,
                            3.763783137212042,
                            2.2282384300581684,
                            6.4091284442663365,
                            7.044594824340899,
                            1.5266190632324188,
                            0.09769633380693893,
                            5.494720511979793,
                            5.9211780635602995,
                            8.413724847292555,
                            2.630332616853073,
                            0.9058617800284163,
                            2.1015033941734367,
                            0.12796458887391163,
                            1.7019593913560906,
                            0.0664110410822495  ]

    text = ''
    generated_key = []

    def __init__(self, verbose):
        self.size = 2
        self.known_size = False
        self.verbose = verbose

    def set_size(self, number):
        self.size = number
        self.known_size = True

    def load(self, text):
        self.text += text

    def find_possible_sizes(self, max_size):
        # Dirty way to find possible sizes
        possible = []
        for leng in range(2, max_size):
            if self.verbose:
                print("Trying to fit size = " + str(leng), file=sys.stderr)
            divider = [''] * leng
            count = 0
            for i in self.text:
                if i not in VigenereCracker.AllowedCharacters:
                    if count >= leng:
                        count = 0
                    divider[count] += i
                    count += 1
            for string in divider:
                freq = [0] * 26
                flag = False
                for i in string:
                    freq[ord(i) - ord("a")] += 1
                for i in range(26):
                    if(freq[i] * 100 / len(string) > 12): # FIXME
                        flag = True
                        if leng not in possible:
                            if self.verbose:
                                print('\t* * ' + str(leng) + " is a possible size!", file = sys.stderr)
                            possible.append(leng)
                        break
                    if flag:
                        break
        if self.verbose and possible == []:
            print("Didn't find any key length possible... Try increasing the key size.", file = sys.stderr)
        return possible


    # Cracks until one key is found.
    def crack(self, max_size = 40):
        self.generated_key = []
        if self.known_size:
            self.__crack(self.size)
        else:
            for i in self.find_possible_sizes(max_size):
                if self.verbose:
                    print("Cracking with size:", i, file = sys.stderr)
                if self.__crack(i, 60):
                    break
        if self.generated_key != []:
            return self.generated_key[0]
        return ''

    # Cracks all possible key sizes.
    def brutecrack(self, max_size = 40):
        self.generated_key = []
        if self.known_size:
            self.__crack(self.size)
        else:
            allowedError = 60
            ratio_increase = 20
            while self.generated_key == [] and allowedError < 350:
                for i in self.find_possible_sizes(max_size):
                    if self.verbose:
                        print("Cracking with size:", i, file = sys.stderr)
                    self.__crack(i, allowedError)
                allowedError += ratio_increase
        return self.generated_key


    def __crack(self, size, allowedError):
        fragment = [''] * size
        counter = 0
        # Fragments text modulo size
        for i in self.text:
            if i not in VigenereCracker.AllowedCharacters:
                fragment[counter % size] += i
                counter += 1
        # Chi-squared test
        generated_key = ''
        counter = 0
        for test in fragment:
            # Initializes counting table
            count = [0] * 26
            for i in test:
                count[ord(i) - ord('a')] += 1
            freq = [i * 100 / len(test) for i in count]
            bestTotal = 1e7
            bestShift = 0
            # For all shifts
            for shift in range(26):
                total = 0
                # Compare all frequencies to english percentage
                for i in range(26):
                    total += (self.English_percentage[i] - freq[(i + shift) % 26]) ** 2 / self.English_percentage[i]
                if total < bestTotal:
                    # print('\t\t\t', chr(bestShift + ord('a')), 'gets replaced by ', chr(shift + ord('a')), ':', bestTotal, 'x', total)
                    bestTotal = total
                    bestShift = shift

            # total now has the distance between tables
            if self.verbose:
                print('\tbest shift for fragment ' + str(counter) + ' is ' + chr(bestShift + ord('a')), file = sys.stderr)
                counter += 1
            if bestTotal > allowedError: # if more than 60, certainly the key size isn't correct
                if self.verbose:
                    print('\t\tdiscarding size ' + str(size) + ', fragment is too distant to english table', file = sys.stderr)
                    print('\t\t(' + str(bestTotal) + ' is too far from most permitted error ' + str(allowedError) + ')')
                return False
            generated_key += chr(bestShift + ord('a'))
        self.generated_key.append(generated_key)
        self.size = size
        return True


def __error(num):
    if num == 1:
        error = "No file specified."
    elif num == 2:
        error = "Size is not a positive integer."
    print("error: vigenere_cracker: " + error)
    print("use " + sys.argv[0] + " --help for usage and commands.")
    sys.exit(0)

def main():
    parser = OptionParser()

    parser.add_option("-f", "--file",
        action = "store",
        dest = "filename",
        type = "string",
        help = "Specifies the file to be brute-forced.",
        metavar = "FILE",
    )
    parser.add_option("-q", "--quiet",
        action = "store_false",
        default = True,
        dest = "verbose",
        help = "Runs in quiet mode: doesn't print progress.",
    )
    parser.add_option("-s", "--size",
        action = "store",
        type = "int",
        default = False,
        dest = "size",
        help = "Specifies key size and works the best approximation instead."
    )


    (flags, args) = parser.parse_args()

    if flags.filename is None:
        __error(1)

    a = VigenereCracker(flags.verbose)
    if not flags.size is False:
        a.set_size(flags.size)

    with open(flags.filename, "r") as f:
        b = f.readlines()
    c = "".join(b)
    a.load(c)
    print("THE FINAL KEY IS:", a.crack())

    brute = input("Should i brutecrack? (y/n) ")
    if brute == "y":
        print("Here we go:", a.brutecrack())

if (__name__ == "__main__"):
    main()
